{"version":3,"sources":["pages/components/ChatBubble.js","util/CommonTools.js","util/BotSession.js","pages/components/ChatInterface.js","pages/MainPage.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","botLine","textAlign","userLine","botMessage","display","backgroundColor","palette","primary","main","borderRadius","margin","maxWidth","userMessage","breakpoints","down","fontSize","messageText","padding","color","ChatBubble","props","classes","Box","className","sender","Typography","message","randomString","length","chars","result","i","Math","floor","random","BotSession","username","isNewUser","this","contexts","dialogflowEndpoint","sessionId","a","dialogflowReply","bot_post_url","Promise","resolve","reject","axios","post","then","response","console","log","JSON","stringify","data","fulfillmentText","outputContexts","catch","err","_sessionId","value","root","height","chatDisplay","chatMessageSection","chats","overflow","bottom","scrollbarWidth","textFieldInputRoot","ChatInterface","useState","botSession","initialBotMessage","setInitialBotMessage","activeUserMessage","setActiveUserMessage","userMessages","setUserMessages","botMessages","setBotMessages","messagesEnd","setMessagesEnd","setErrorMsg","sendUserMessage","newMessage","index","prevState","useEffect","getWelcomeMessage","errMsg","scrollToBottom","scrollIntoView","block","userMessageIndex","sendMessageToBot","sendBotMessage","inReplyToUserMessageIndex","sendMessageToDialogflow","border","flexDirection","flexGrow","justifyContent","map","filter","botReply","style","float","clear","ref","el","flexWrap","borderTop","TextField","fullWidth","placeholder","onChange","event","target","onKeyPress","charCode","inputProps","Button","onClick","icon","chatContainer","marginTop","MainPage","Container","Grid","container","justify","item","md","xs","pt","variant","createMuiTheme","background","default","secondary","contrastText","typography","h3","App","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f09f875d.chunk.js","sourcesContent":["import { Box, makeStyles, Typography } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n    botLine: {\n        textAlign: \"left\"\n    },\n    userLine: {\n        textAlign: \"right\"\n    },\n    botMessage: {\n        display: \"inline-block\",\n        backgroundColor: theme.palette.primary.main,\n        borderRadius: \"20px 20px 20px 5px\",\n        margin: \"10px 20px\",\n        textAlign: \"left\",\n        maxWidth: \"60%\",\n        \n    },\n    userMessage: {\n        display: \"inline-block\",\n        backgroundColor: theme.palette.primary.main,\n        borderRadius: \"20px 20px 5px 20px\",\n        margin: \"10px 20px\",\n        textAlign: \"right\",\n        maxWidth: \"60%\",\n        [theme.breakpoints.down('xs')]: {\n            fontSize: \"0.5rem\",\n        },\n    },\n    messageText: {\n        padding: \"10px 25px\",\n        color: \"white\",\n        fontSize: \"1.2rem\",\n        [theme.breakpoints.down('xs')]: {\n            fontSize: \"1rem\",\n            padding: \"7px 17px\",\n        },\n    }\n}))\n\nexport default function ChatBubble(props) {\n    const classes = useStyles();\n\n\n    return (<Box className={props.sender === \"bot\" ? classes.botLine : classes.userLine}>\n        <Box className={props.sender === \"bot\" ? classes.botMessage : classes.userMessage}>\n            <Typography className={classes.messageText}>\n                {props.message}\n            </Typography>\n        </Box>\n    </Box>)\n    \n\n}","\nexport function randomString(length, chars) {\n    chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    var result = '';\n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}","import {randomString} from \"./CommonTools.js\";\nimport axios from \"axios\";\n\nexport class BotSession {\n    constructor(username = null, isNewUser = true) {\n        this.username = username;\n        this.contexts = []\n\n        var env = process.env.NODE_ENV || 'development';\n        if ( env === \"test\" ) {\n            this.dialogflowEndpoint = \"http://localhost:5005/\"\n        } else if ( env === \"production\" ) {\n            this.dialogflowEndpoint = \"http://localhost:5005/\"\n        } else {\n            this.dialogflowEndpoint = process.env.REACT_APP_EXPRESS_ENDPOINT_DEV\n        }\n        \n        if(isNewUser) {\n            // Create new, random session ID if user is new. This will become standard if user account is created.\n            this.sessionId = randomString(16);\n        }\n    }\n\n    // Set up new connection between BotSession and DialogFlow.\n    async getWelcomeMessage(isNewUser = true) {\n        let dialogflowReply = \"\"\n        const bot_post_url = this.dialogflowEndpoint + \"welcome\"\n        return new Promise( (resolve, reject) => {\n            axios.post(bot_post_url, {\n                sessionId: this.sessionId,\n                isNewUser: isNewUser\n            }).then(response => {\n            console.log(\"response: \" + JSON.stringify(response.data));\n            dialogflowReply = response.data.fulfillmentText;\n            this.contexts = response.data.outputContexts;\n            resolve(dialogflowReply);\n            }).catch((err) => {\n                console.log(\"There was an error fetching the message from dialogflow.\");\n                console.log(err);\n                reject(err);\n            })\n        });\n    }\n\n    async sendMessageToBot(message) {\n        let dialogflowReply = \"\"\n        const bot_post_url = this.dialogflowEndpoint\n        return new Promise((resolve, reject) => {\n            axios.post(bot_post_url, {\n                sessionId: this.sessionId,\n                message: message,\n                contexts: this.contexts\n            }).then(response => {\n                console.log((response.data));\n                dialogflowReply = response.data.fulfillmentText;\n                this.contexts = response.data.outputContexts;\n                resolve(dialogflowReply);\n            }).catch((err) => {\n                console.log(\"There was an error fetching the message from dialogflow.\");\n                console.log(err);\n                reject(err);\n            })\n        });\n    }\n\n    get sessionId() {\n        return this._sessionId;\n    }\n\n    set sessionId(value) {\n        this._sessionId = value;\n    }\n\n}","import { Box, Button, makeStyles, TextField } from \"@material-ui/core\";\nimport SendSharpIcon from '@material-ui/icons/SendSharp';\nimport { useEffect, useState } from \"react\";\nimport ChatBubble from \"./ChatBubble\";\nimport {BotSession} from \"../../util/BotSession.js\"\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        // border: \"1px solid\",\n        // borderColor: \"primary\",\n        borderRadius: \"5px\",\n        padding: \"20px\",\n        height: \"600px\",\n        [theme.breakpoints.down('xs')]: {\n            height: \"600px\"\n        },\n        backgroundColor: theme.palette.primary.main\n    },\n    chatDisplay: {\n        backgroundColor: \"white\",\n        borderRadius: \"5px\",\n        height: \"100%\",\n    },\n    chatMessageSection: {\n        padding: \"5px 20px\",\n    },\n    chats: {\n        overflow: \"auto\",\n        bottom: 0,\n        height: \"100%\",\n        /* Hide scrollbar for Chrome, Safari and Opera */\n        '&::-webkit-scrollbar': {\n            display: \"none !important\"\n        },\n        scrollbarWidth: \"none\",  /* Firefox */\n    },\n    textFieldInputRoot: {\n        height: \"1.5rem\",\n        fontSize: \"1.2rem\",\n        [theme.breakpoints.down('xs')]: {\n            height: \"1.2rem\",\n            fontSize: \"1rem\",\n        },\n    }\n    \n}));\n\n// To do: add botMessage chatbubble after user message chat bubble if botmessage chatbubble exists.\n// If not, add a \"...\" chat bubbble while waiting\n\nexport default function ChatInterface() {\n    const classes = useStyles();\n\n    const [botSession] = useState(new BotSession())\n\n    const [initialBotMessage, setInitialBotMessage] = useState(\"\")\n    const [activeUserMessage, setActiveUserMessage] = useState(\"\")\n    const [userMessages, setUserMessages] = useState([])\n    const [botMessages, setBotMessages] = useState([])\n    const [messagesEnd, setMessagesEnd] = useState(null)\n    const [errorMsg, setErrorMsg] = useState(\"\")\n\n    // Effects that take place only upon initial render.\n    useEffect( () => {\n        botSession.getWelcomeMessage().then( (message) => {\n            setInitialBotMessage(message)\n        }).catch( (errMsg) => {\n            setErrorMsg(\"Our bot had a problem getting the welcome message. Sorry!\")\n            setInitialBotMessage(\"Uh oh: Our bot had a problem getting the welcome message. Sorry!\")\n        });\n        \n    }, [])\n    \n    // Effects that take place when new messages are sent.\n    useEffect( () => {\n        if(messagesEnd) {\n            scrollToBottom()\n        }\n\n        function scrollToBottom() {\n            messagesEnd.scrollIntoView(false, { block: \"end\" });\n        }\n\n        async function sendMessageToDialogflow(messageText, userMessageIndex) {\n\n            botSession.sendMessageToBot(messageText).then( (message) => {\n                sendBotMessage(message, userMessageIndex)\n            })\n\n        }\n\n        function sendBotMessage(message, userMessageIndex) {\n            let newMessage = {\n                message: message,\n                inReplyToUserMessageIndex: userMessageIndex,\n                index: 0\n            }\n            setBotMessages(prevState => [\n                ...prevState,\n                newMessage\n            ])\n            scrollToBottom()\n        }\n\n        if (userMessages.length) {\n            sendMessageToDialogflow(userMessages[userMessages.length - 1].message, userMessages.length - 1)\n        }\n        \n\n\n    }, [userMessages])\n\n    function sendUserMessage() {\n        let newMessage = {\n            message: activeUserMessage,\n            index: userMessages.length\n        }\n        setUserMessages( prevState => [\n            ...prevState,\n            newMessage\n        ])\n        // sendMessageToDialogflow(activeUserMessage, numMessages + 1)\n        setActiveUserMessage(\"\")\n    }\n\n    \n    function handleActiveUserMessageChange(event, value) {\n        setActiveUserMessage(event.target.value)\n    }\n\n    function handleKeypress(event, value) {\n        if (event.charCode === 13) {\n            sendUserMessage()\n        }\n\n    }\n    \n    return (\n\n        // Your JSX...\n\n        <Box className={classes.root} border={2}>\n            <Box display=\"flex\" flexDirection=\"column\"\n                className={classes.chatDisplay}\n                border={2}\n            >\n                <Box className={classes.chats}>\n                    <Box flexGrow=\"1\" display=\"flex\" \n                    flexDirection=\"column\"\n                    justifyContent=\"flex-end\"\n                    >\n                        {initialBotMessage? \n                        <ChatBubble sender=\"bot\"\n                        message={initialBotMessage} />\n                        : null}\n                        {userMessages.map(userMessage =>\n                            <span key={userMessage.index}>\n                                <ChatBubble sender=\"user\"\n                                    message={userMessage.message} />\n                                {botMessages.filter(botMessage => botMessage.inReplyToUserMessageIndex === userMessage.index)\n                                    .map(botReply => \n                                     <ChatBubble sender=\"bot\"\n                                        key={botReply.index}\n                                        message={botReply.message} />)\n                                }\n                            </span> \n\n                        )}\n                        <div style={{ float: \"left\", clear: \"both\" }}\n                            ref={(el) => { setMessagesEnd(el) }}>\n                        </div>\n                    </Box>\n                </Box>\n                <Box display=\"flex\" flexWrap=\"nowrap\" \n                borderTop={1}\n                className={classes.chatMessageSection}>\n                    <Box flexGrow=\"1\">\n                        <TextField fullWidth \n                            placeholder=\"Send a message...\"\n                            value={activeUserMessage}\n                            onChange={handleActiveUserMessageChange}\n                            onKeyPress={handleKeypress}\n                            inputProps= {{\n                                className: classes.textFieldInputRoot\n                            }}\n                            \n                        />\n                    </Box>\n                    <Button onClick={sendUserMessage} icon=\"true\"><SendSharpIcon color=\"primary\"/></Button>\n                </Box>\n                    \n            </Box>\n        </Box>\n\n    );\n}","import { Box, Container, Grid, makeStyles, Typography } from \"@material-ui/core\";\nimport ChatInterface from \"./components/ChatInterface.js\"\n\nconst useStyles = makeStyles({\n    root: {\n    },\n    chatContainer: {\n        marginTop: \"50px\",\n    },\n});\n\nexport default function MainPage() {\n    const classes = useStyles();\n\n    return <div className={classes.root} >\n        <Container maxWidth=\"xl\">\n            <Grid container style={{flexWrap: \"wrap-reverse\"}} justify=\"center\">\n                <Grid item md={8} xs={12}>\n                    <Box pt={4}>\n                    <Typography variant=\"h3\" color=\"secondary\">\n                        Birthday Bot!\n                    </Typography>\n                    </Box>\n                    <Container className={classes.chatContainer}>\n                        <ChatInterface />\n                    </Container>\n                    \n                </Grid>\n            </Grid>\n        </Container>\n    </div>\n}","import './App.css';\nimport MainPage from './pages/MainPage'\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { createMuiTheme } from \"@material-ui/core\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nconst theme = createMuiTheme({\n  palette: {\n    background: {\n      default: \"#333333\"\n    },\n    primary: {\n      main: \"#007bff\",\n    },\n    secondary: {\n      main: '#ffffff',\n      // dark: will be calculated from palette.secondary.main,\n      contrastText: '#ffcc00',\n    },\n  },\n  typography: {\n    fontSize: 12,\n    h3: {\n\n    }\n  },\n});\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <MainPage />\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}